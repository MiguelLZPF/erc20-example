/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ContractRegistryInterface extends ethers.utils.Interface {
  functions: {
    "deployContract(bytes,bytes,bytes32,bytes32)": FunctionFragment;
    "getRecord(address)": FunctionFragment;
    "getType(bytes32)": FunctionFragment;
    "getTypeByName(string)": FunctionFragment;
    "getTypes()": FunctionFragment;
    "getVersion(bytes32)": FunctionFragment;
    "getVersionByName(string)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isType(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeType(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setType(string,bytes2)": FunctionFragment;
    "setVersion(bytes32,bytes2)": FunctionFragment;
    "transferOwner(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRecordOwner(address)": FunctionFragment;
    "upgradeContract(address,bytes,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployContract",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getRecord", values: [string]): string;
  encodeFunctionData(functionFragment: "getType", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTypeByName",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTypes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isType", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setType",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecordOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeContract",
    values: [string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTypeByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVersionByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecordOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeContract",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,address,address,bytes32,string,bytes2)": EventFragment;
    "Initialized(address,address)": EventFragment;
    "NewType(bytes32,string,bytes2)": EventFragment;
    "OwnerChanged(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TypeDeleted(bytes32)": EventFragment;
    "Upgraded(address,address,address,address,bytes32,string,bytes2,bytes2)": EventFragment;
    "VersionUpdated(bytes32,bytes2,bytes2)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TypeDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionUpdated"): EventFragment;
}

export class ContractRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ContractRegistryInterface;

  functions: {
    deployContract(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployContract(bytes,bytes,bytes32,bytes32)"(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRecord(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, BigNumber, BigNumber] & {
          proxy: string;
          logic: string;
          owner: string;
          type_: string;
          version: string;
          dateCreated: BigNumber;
          dateUpdated: BigNumber;
        }
      ]
    >;

    "getRecord(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string, BigNumber, BigNumber] & {
          proxy: string;
          logic: string;
          owner: string;
          type_: string;
          version: string;
          dateCreated: BigNumber;
          dateUpdated: BigNumber;
        }
      ]
    >;

    getType(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string] & { id: string; name: string; version: string }]
    >;

    "getType(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string] & { id: string; name: string; version: string }]
    >;

    getTypeByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string] & { id: string; name: string; version: string }]
    >;

    "getTypeByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string] & { id: string; name: string; version: string }]
    >;

    getTypes(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string] & {
          id: string;
          name: string;
          version: string;
        })[]
      ]
    >;

    "getTypes()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string] & {
          id: string;
          name: string;
          version: string;
        })[]
      ]
    >;

    getVersion(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getVersion(bytes32)"(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVersionByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getVersionByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    isType(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isType(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeType(
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeType(bytes32)"(
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setType(
      _type: string,
      _version: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setType(string,bytes2)"(
      _type: string,
      _version: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVersion(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVersion(bytes32,bytes2)"(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwner(
      _proxy: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwner(address,address)"(
      _proxy: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRecordOwner(
      _proxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRecordOwner(address)"(
      _proxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeContract(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeContract(address,bytes,bytes32)"(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deployContract(
    _bytecode: BytesLike,
    _data: BytesLike,
    _salt: BytesLike,
    _typeId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployContract(bytes,bytes,bytes32,bytes32)"(
    _bytecode: BytesLike,
    _data: BytesLike,
    _salt: BytesLike,
    _typeId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRecord(
    _proxy: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, BigNumber, BigNumber] & {
      proxy: string;
      logic: string;
      owner: string;
      type_: string;
      version: string;
      dateCreated: BigNumber;
      dateUpdated: BigNumber;
    }
  >;

  "getRecord(address)"(
    _proxy: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, BigNumber, BigNumber] & {
      proxy: string;
      logic: string;
      owner: string;
      type_: string;
      version: string;
      dateCreated: BigNumber;
      dateUpdated: BigNumber;
    }
  >;

  getType(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { id: string; name: string; version: string }
  >;

  "getType(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { id: string; name: string; version: string }
  >;

  getTypeByName(
    _typeName: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { id: string; name: string; version: string }
  >;

  "getTypeByName(string)"(
    _typeName: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { id: string; name: string; version: string }
  >;

  getTypes(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string] & { id: string; name: string; version: string })[]
  >;

  "getTypes()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string] & { id: string; name: string; version: string })[]
  >;

  getVersion(_typeId: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getVersion(bytes32)"(
    _typeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getVersionByName(
    _typeName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVersionByName(string)"(
    _typeName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  isType(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isType(string)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeType(
    _typeId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeType(bytes32)"(
    _typeId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setType(
    _type: string,
    _version: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setType(string,bytes2)"(
    _type: string,
    _version: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVersion(
    _typeId: BytesLike,
    _newVersion: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVersion(bytes32,bytes2)"(
    _typeId: BytesLike,
    _newVersion: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwner(
    _proxy: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwner(address,address)"(
    _proxy: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRecordOwner(
    _proxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRecordOwner(address)"(
    _proxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeContract(
    _proxy: string,
    _bytecode: BytesLike,
    _salt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeContract(address,bytes,bytes32)"(
    _proxy: string,
    _bytecode: BytesLike,
    _salt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deployContract(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployContract(bytes,bytes,bytes32,bytes32)"(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRecord(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, BigNumber] & {
        proxy: string;
        logic: string;
        owner: string;
        type_: string;
        version: string;
        dateCreated: BigNumber;
        dateUpdated: BigNumber;
      }
    >;

    "getRecord(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, BigNumber] & {
        proxy: string;
        logic: string;
        owner: string;
        type_: string;
        version: string;
        dateCreated: BigNumber;
        dateUpdated: BigNumber;
      }
    >;

    getType(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { id: string; name: string; version: string }
    >;

    "getType(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { id: string; name: string; version: string }
    >;

    getTypeByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { id: string; name: string; version: string }
    >;

    "getTypeByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { id: string; name: string; version: string }
    >;

    getTypes(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string] & {
        id: string;
        name: string;
        version: string;
      })[]
    >;

    "getTypes()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string] & {
        id: string;
        name: string;
        version: string;
      })[]
    >;

    getVersion(_typeId: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getVersion(bytes32)"(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getVersionByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVersionByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isType(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isType(string)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeType(_typeId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "removeType(bytes32)"(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setType(
      _type: string,
      _version: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setType(string,bytes2)"(
      _type: string,
      _version: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVersion(bytes32,bytes2)"(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwner(
      _proxy: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwner(address,address)"(
      _proxy: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRecordOwner(_proxy: string, overrides?: CallOverrides): Promise<void>;

    "updateRecordOwner(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeContract(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeContract(address,bytes,bytes32)"(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deployed(
      proxy: null,
      logic: null,
      owner: string | null,
      typeId: BytesLike | null,
      typeName: null,
      version: BytesLike | null
    ): EventFilter;

    Initialized(registry: string | null, owner: string | null): EventFilter;

    NewType(
      id: BytesLike | null,
      type_: null,
      version: BytesLike | null
    ): EventFilter;

    OwnerChanged(
      proxy: string | null,
      oldOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TypeDeleted(id: BytesLike | null): EventFilter;

    Upgraded(
      proxy: string | null,
      oldLogic: null,
      newLogic: null,
      owner: string | null,
      typeId: BytesLike | null,
      typeName: null,
      oldVersion: null,
      newVersion: null
    ): EventFilter;

    VersionUpdated(
      id: BytesLike | null,
      oldVersion: BytesLike | null,
      newVersion: BytesLike | null
    ): EventFilter;
  };

  estimateGas: {
    deployContract(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployContract(bytes,bytes,bytes32,bytes32)"(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRecord(_proxy: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getRecord(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getType(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getType(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypeByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTypeByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypes(overrides?: CallOverrides): Promise<BigNumber>;

    "getTypes()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVersion(bytes32)"(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVersionByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    isType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isType(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeType(_typeId: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "removeType(bytes32)"(
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setType(
      _type: string,
      _version: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setType(string,bytes2)"(
      _type: string,
      _version: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVersion(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVersion(bytes32,bytes2)"(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwner(
      _proxy: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwner(address,address)"(
      _proxy: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRecordOwner(
      _proxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRecordOwner(address)"(
      _proxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeContract(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeContract(address,bytes,bytes32)"(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployContract(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployContract(bytes,bytes,bytes32,bytes32)"(
      _bytecode: BytesLike,
      _data: BytesLike,
      _salt: BytesLike,
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRecord(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getType(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getType(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypeByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTypeByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTypes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersion(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVersion(bytes32)"(
      _typeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionByName(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVersionByName(string)"(
      _typeName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isType(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isType(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeType(
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeType(bytes32)"(
      _typeId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setType(
      _type: string,
      _version: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setType(string,bytes2)"(
      _type: string,
      _version: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVersion(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVersion(bytes32,bytes2)"(
      _typeId: BytesLike,
      _newVersion: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwner(
      _proxy: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwner(address,address)"(
      _proxy: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRecordOwner(
      _proxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRecordOwner(address)"(
      _proxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeContract(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeContract(address,bytes,bytes32)"(
      _proxy: string,
      _bytecode: BytesLike,
      _salt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
