/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IobManagerInterface extends ethers.utils.Interface {
  functions: {
    "deleteUser(bytes32)": FunctionFragment;
    "deposit(bytes32,uint256)": FunctionFragment;
    "editUser(bytes32,string,string)": FunctionFragment;
    "getAllUsers()": FunctionFragment;
    "getMyUser()": FunctionFragment;
    "getUser(bytes32)": FunctionFragment;
    "getUserByName(string)": FunctionFragment;
    "getUserByOwner(address)": FunctionFragment;
    "initToken()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "newUser(string,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transfer(bytes32,bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deleteUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editUser",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMyUser", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUser", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getUserByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserByOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "newUser",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deleteUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(bytes32,uint256)": EventFragment;
    "Deposit(bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(bytes32,bytes32,uint256)": EventFragment;
    "UserCreated(bytes32,string,string)": EventFragment;
    "UserDeleted(bytes32)": EventFragment;
    "UserEdited(bytes32,string,string)": EventFragment;
    "Withdraw(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IobManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IobManagerInterface;

  functions: {
    deleteUser(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteUser(bytes32)"(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(bytes32,uint256)"(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    editUser(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editUser(bytes32,string,string)"(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllUsers(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        })[]
      ]
    >;

    "getAllUsers()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        })[]
      ]
    >;

    getMyUser(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    "getMyUser()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    getUser(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    "getUser(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    getUserByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    "getUserByName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    getUserByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    "getUserByOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, BigNumber, BigNumber] & {
          id: string;
          owner: string;
          name: string;
          password: string;
          dateCreated: BigNumber;
          dateModified: BigNumber;
        }
      ]
    >;

    initToken(overrides?: Overrides): Promise<ContractTransaction>;

    "initToken()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialize(
      _users: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _users: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newUser(
      _name: string,
      _password: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newUser(string,string)"(
      _name: string,
      _password: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transfer(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(bytes32,bytes32,uint256)"(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(bytes32,uint256)"(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deleteUser(
    _id: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteUser(bytes32)"(
    _id: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _recipientId: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(bytes32,uint256)"(
    _recipientId: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  editUser(
    _id: BytesLike,
    _newName: string,
    _newPass: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editUser(bytes32,string,string)"(
    _id: BytesLike,
    _newName: string,
    _newPass: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllUsers(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    })[]
  >;

  "getAllUsers()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    })[]
  >;

  getMyUser(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  "getMyUser()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  getUser(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  "getUser(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  getUserByName(
    _name: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  "getUserByName(string)"(
    _name: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  getUserByOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  "getUserByOwner(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      id: string;
      owner: string;
      name: string;
      password: string;
      dateCreated: BigNumber;
      dateModified: BigNumber;
    }
  >;

  initToken(overrides?: Overrides): Promise<ContractTransaction>;

  "initToken()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialize(
    _users: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _users: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newUser(
    _name: string,
    _password: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newUser(string,string)"(
    _name: string,
    _password: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transfer(
    _spenderId: BytesLike,
    _recipientId: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(bytes32,bytes32,uint256)"(
    _spenderId: BytesLike,
    _recipientId: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _spenderId: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(bytes32,uint256)"(
    _spenderId: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deleteUser(_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    "deleteUser(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(bytes32,uint256)"(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editUser(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "editUser(bytes32,string,string)"(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllUsers(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      })[]
    >;

    "getAllUsers()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      })[]
    >;

    getMyUser(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    "getMyUser()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    getUser(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    "getUser(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    getUserByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    "getUserByName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    getUserByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    "getUserByOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        id: string;
        owner: string;
        name: string;
        password: string;
        dateCreated: BigNumber;
        dateModified: BigNumber;
      }
    >;

    initToken(overrides?: CallOverrides): Promise<void>;

    "initToken()"(overrides?: CallOverrides): Promise<void>;

    initialize(_users: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _users: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newUser(
      _name: string,
      _password: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "newUser(string,string)"(
      _name: string,
      _password: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transfer(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(bytes32,bytes32,uint256)"(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes32,uint256)"(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      spender: BytesLike | null,
      amount: BigNumberish | null
    ): EventFilter;

    Deposit(
      recipient: BytesLike | null,
      amount: BigNumberish | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      spender: BytesLike | null,
      recipient: BytesLike | null,
      amount: BigNumberish | null
    ): EventFilter;

    UserCreated(
      id: BytesLike | null,
      name: string | null,
      password: null
    ): EventFilter;

    UserDeleted(id: BytesLike | null): EventFilter;

    UserEdited(
      id: BytesLike | null,
      newName: string | null,
      newPassword: null
    ): EventFilter;

    Withdraw(
      spender: BytesLike | null,
      amount: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    deleteUser(_id: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "deleteUser(bytes32)"(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(bytes32,uint256)"(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    editUser(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editUser(bytes32,string,string)"(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllUsers(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllUsers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMyUser(overrides?: CallOverrides): Promise<BigNumber>;

    "getMyUser()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getUser(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserByName(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserByName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserByOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initToken(overrides?: Overrides): Promise<BigNumber>;

    "initToken()"(overrides?: Overrides): Promise<BigNumber>;

    initialize(_users: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _users: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newUser(
      _name: string,
      _password: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newUser(string,string)"(
      _name: string,
      _password: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transfer(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(bytes32,bytes32,uint256)"(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(bytes32,uint256)"(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deleteUser(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteUser(bytes32)"(
      _id: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(bytes32,uint256)"(
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    editUser(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editUser(bytes32,string,string)"(
      _id: BytesLike,
      _newName: string,
      _newPass: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllUsers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMyUser()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUser(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserByName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserByOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initToken(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initToken()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initialize(
      _users: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _users: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newUser(
      _name: string,
      _password: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newUser(string,string)"(
      _name: string,
      _password: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transfer(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(bytes32,bytes32,uint256)"(
      _spenderId: BytesLike,
      _recipientId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes32,uint256)"(
      _spenderId: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
